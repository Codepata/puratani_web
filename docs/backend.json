{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "clerkId": {
          "type": "string",
          "description": "Clerk-provided user ID."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "fullName": {
          "type": "string",
          "description": "Full name of the user."
        },
        "profilePhotoUrl": {
          "type": "string",
          "description": "URL to the user's profile photo.",
          "format": "uri"
        },
        "joinedDate": {
          "type": "string",
          "description": "Date when the user joined the application.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "clerkId",
        "email",
        "fullName",
        "profilePhotoUrl",
        "joinedDate"
      ]
    },
    "Cause": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Cause",
      "type": "object",
      "description": "Represents a cause that users can donate to.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the cause."
        },
        "title": {
          "type": "string",
          "description": "Title of the cause."
        },
        "description": {
          "type": "string",
          "description": "Short description of the cause."
        },
        "imageURL": {
          "type": "string",
          "description": "URL of the image representing the cause.",
          "format": "uri"
        },
        "targetAmount": {
          "type": "number",
          "description": "Target amount to be raised for the cause."
        },
        "currentAmount": {
          "type": "number",
          "description": "Current amount raised for the cause."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageURL",
        "targetAmount",
        "currentAmount"
      ]
    },
    "Donation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Donation",
      "type": "object",
      "description": "Represents a donation made by a user to a cause.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the donation."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Donation)"
        },
        "causeId": {
          "type": "string",
          "description": "Reference to Cause. (Relationship: Cause 1:N Donation)"
        },
        "amount": {
          "type": "number",
          "description": "Amount donated by the user."
        },
        "donationDate": {
          "type": "string",
          "description": "Date when the donation was made.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "causeId",
        "amount",
        "donationDate"
      ]
    },
    "BlogPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlogPost",
      "type": "object",
      "description": "Represents a blog post retrieved from Django CMS.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the blog post."
        },
        "title": {
          "type": "string",
          "description": "Title of the blog post."
        },
        "date": {
          "type": "string",
          "description": "Date the blog post was published.",
          "format": "date-time"
        },
        "thumbnailURL": {
          "type": "string",
          "description": "URL of the blog post's thumbnail image.",
          "format": "uri"
        },
        "previewText": {
          "type": "string",
          "description": "Short preview text of the blog post."
        },
        "contentURL": {
          "type": "string",
          "description": "URL where the full content of the blog post can be accessed.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "title",
        "date",
        "thumbnailURL",
        "previewText",
        "contentURL"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/user_profiles/{userProfileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. Access is restricted to the user themselves (path-based ownership) and admins. Includes all information about a user. Uses path based ownership",
          "params": [
            {
              "name": "userProfileId",
              "description": "The unique identifier for the user profile."
            }
          ]
        }
      },
      {
        "path": "/causes/{causeId}",
        "definition": {
          "entityName": "Cause",
          "schema": {
            "$ref": "#/backend/entities/Cause"
          },
          "description": "Stores causes. Anyone can read causes, but only admins can create, update, or delete them.",
          "params": [
            {
              "name": "causeId",
              "description": "The unique identifier for the cause."
            }
          ]
        }
      },
      {
        "path": "/donations/{donationId}",
        "definition": {
          "entityName": "Donation",
          "schema": {
            "$ref": "#/backend/entities/Donation"
          },
          "description": "Stores donations. Each donation is associated with a user and a cause. Donations are stored in a top-level collection. Donations can be read by the user who created them or by an admin.",
          "params": [
            {
              "name": "donationId",
              "description": "The unique identifier for the donation."
            }
          ]
        }
      },
      {
        "path": "/blog_posts/{blogPostId}",
        "definition": {
          "entityName": "BlogPost",
          "schema": {
            "$ref": "#/backend/entities/BlogPost"
          },
          "description": "Stores blog posts fetched from the Django CMS. Only admins can create, update, or delete blog posts. Anyone can read them.",
          "params": [
            {
              "name": "blogPostId",
              "description": "The unique identifier for the blog post."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "roles_admin",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "This collection uses **Existence over Content** to grant administrative privileges. If a document exists with the user's ID in this collection, the user is considered an administrator.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to meet the application's requirements while adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It incorporates denormalization where necessary to avoid using `get()` calls in security rules and to enable atomic operations.\n\n**Structure Justification:**\n\n*   **/user_profiles/{userProfileId}**: Stores user profile data. Access is restricted to the user themselves (path-based ownership) and admins. The `clerkId` is stored to allow easy lookup of a user by their Clerk ID. Includes all information about a user. Uses path based ownership\n*   **/causes/{causeId}**: Stores causes. Anyone can read causes, but only admins can create, update, or delete them.\n*   **/donations/{donationId}**: Stores donations. Each donation is associated with a user and a cause. Donations are stored in a top-level collection. Donations can be read by the user who created them or by an admin.\n*   **/blog_posts/{blogPostId}**: Stores blog posts fetched from the Django CMS. Only admins can create, update, or delete blog posts. Anyone can read them.\n*   **/roles_admin/{userId}**: This collection uses **Existence over Content** to grant administrative privileges. If a document exists with the user's ID in this collection, the user is considered an administrator.\n\n**Authorization Independence:**\n\n*   The structure leverages path-based ownership (`/user_profiles/{userProfileId}`) to establish a clear, secure relationship between users and their profiles. This eliminates the need for complex authorization logic and `get()` calls.\n*   The **/roles_admin/{userId}** collection enables admin privileges without needing to read user profile data. This ensures that admin status can be checked independently of user profile content, simplifying security rules and maintaining atomicity.\n\n**QAPs (Rules Are Not Filters):**\n\n*   The segregation of user profiles, causes, donations, and blog posts into separate collections ensures that list operations can be performed securely. Rules can be applied at the collection level without needing to filter based on document content. The use of a roles collection to define admin rights also supports secure list operations.\n*   The structure avoids mixing data with different access requirements in the same collection. For example, public blog posts and user-specific drafts are not stored together. This simplifies rules and prevents unintended data exposure."
  }
}